' Require all variables to be declared
Option Explicit

' Constants
#define SCRIPT_VER					1
#define NUM_CHANNELS				2
#define STATE_SERIAL_CTRL			0
#define STATE_RADIO_CTRL			1
#define STATE_WAIT_STOP				2
#define COMMAND_STOP				-1
#define COMMAND_SPEED_CTRL			0
#define COMMAND_POS_CTRL			1
#define COMMAND_MIN					COMMAND_STOP
#define COMMAND_MAX					COMMAND_POS_CTRL
#define PULSE_CUTOFF_WIDTH_LOW_US 	1125
#define PULSE_CUTOFF_WIDTH_HIGH_US	1175
#define UPDATE_TIMER				0
#define WAIT_STOP_TIMER				1
#define UPDATE_PERIOD_MS			20
#define WAIT_STOP_TIMEOUT_MS		5000
#define STATUS_PERIOD_MS			100
#define STATUS_CNTR_RELOAD_VALUE	STATUS_PERIOD_MS / UPDATE_PERIOD_MS

' Variable declarations
Dim state As Integer
Dim channel As Integer
Dim command As Integer
Dim prev_command[NUM_CHANNELS] as Integer
Dim pulse_width As Integer
Dim stopped As Boolean
Dim status_cntr As Integer

SetConfig(_ECHOF, 1)	' disable echo
SetConfig(_SCRO, 1)		' select serial port for Print statements

' Reset
GoSub Reset

' Main loop
status_cntr = STATUS_CNTR_RELOAD_VALUE
While True
	' Start timer
	SetTimerCount(UPDATE_TIMER, UPDATE_PERIOD_MS)
	SetTimerState(UPDATE_TIMER, 0)

	' Read current width of RC pulse input
	pulse_width = GetValue(_PLSIN, 3)

	If state = STATE_SERIAL_CTRL Then
		If pulse_width > PULSE_CUTOFF_WIDTH_HIGH_US Then
			For channel = 1 AndWhile channel <= NUM_CHANNELS Evaluate channel++
				' Set open-loop mode
				SetConfig(_MMOD, channel, 0)
			Next

			' Set priority: 1st = RC, 2nd = serial
			SetConfig(_CPRI, 1, 1)
			SetConfig(_CPRI, 2, 0)

			state = STATE_RADIO_CTRL
		Else
			For channel = 1 AndWhile channel <= NUM_CHANNELS Evaluate channel++
				command = GetValue(_VAR, channel)
				If command <> prev_command[channel - 1] Then
					GoSub SetParams
					prev_command[channel - 1] = command
				End If
			Next
		End If
	ElseIf state = STATE_RADIO_CTRL Then
		If pulse_width < PULSE_CUTOFF_WIDTH_LOW_US Then
			For channel = 1 AndWhile channel <= NUM_CHANNELS Evaluate channel++
				' Set open-loop mode
				SetConfig(_MMOD, channel, 0)
				' Set zero motor power
				SetCommand(_G, channel, 0)
			Next

			' Disable all command sources temporarily
			SetConfig(_CPRI, 1, 4)
			SetConfig(_CPRI, 2, 4)

			' Start timer
			SetTimerCount(WAIT_STOP_TIMER, WAIT_STOP_TIMEOUT_MS)
			SetTimerState(WAIT_STOP_TIMER, 0)

			state = STATE_WAIT_STOP
		End If
	ElseIf state = STATE_WAIT_STOP
		' Check if all channels have stopped
		stopped = True
		For channel = 1 AndWhile channel <= NUM_CHANNELS Evaluate channel++
			If GetValue(_ABSPEED, channel) <> 0
				stopped = False
				Exit For
			End If
		Next

		' Check if stopped or timeout has expired
		If stopped Or GetTimerCount(WAIT_STOP_TIMER) = 0 Then
			' Go to commanded mode
			For channel = 1 AndWhile channel <= NUM_CHANNELS Evaluate channel++
				command = GetValue(_VAR, channel)
				GoSub SetParams
				prev_command[channel - 1] = command
			Next

			' Set priority: 1st = serial, 2nd = RC
			SetConfig(_CPRI, 1, 0)
			SetConfig(_CPRI, 2, 1)

			state = STATE_SERIAL_CTRL
		End If
	Else
		GoSub Reset
	End If

	' Print channel feedback
	For channel = 1 AndWhile channel <= NUM_CHANNELS Evaluate channel++
		GoSub PrintFeedback
	Next

	' Print controller status
	status_cntr--
	If status_cntr = 0 Then
		GoSub PrintStatus
		status_cntr = STATUS_CNTR_RELOAD_VALUE
	End If

	' Delay until next update time
	Wait(GetTimerCount(UPDATE_TIMER))
End While

Reset:
	' Stop all channels
	For channel = 1 AndWhile channel <= NUM_CHANNELS Evaluate channel++
		command = COMMAND_STOP
		SetCommand(_VAR, channel, command)
		GoSub SetParams
		prev_command[channel - 1] = command
	Next

	' Set priority: 1st = serial, 2nd = RC
	SetConfig(_CPRI, 1, 0)
	SetConfig(_CPRI, 2, 1)

	state = STATE_SERIAL_CTRL
	Return

SetParams:
	If command < COMMAND_MIN Or command > COMMAND_MAX Then
		command = COMMAND_STOP
	End If

	If command = COMMAND_STOP Then
		' Set open-loop mode
		SetConfig(_MMOD, channel, 0)
		' Set zero motor power
		SetCommand(_G, channel, 0)
	ElseIf command = COMMAND_SPEED_CTRL Then
		' Set closed-loop speed mode
		SetConfig(_MMOD, channel, 1)
		' Set PID parameters
		SetConfig(_KP, channel, 0)
		SetConfig(_KI, channel, 10)
		SetConfig(_KD, channel, 0)
		SetConfig(_ICAP, channel, 100)
	ElseIf command = COMMAND_POS_CTRL Then
		' Set closed-loop position mode
		SetConfig(_MMOD, channel, 3)
		' Set PID parameters
		SetConfig(_KP, channel, 20)
		SetConfig(_KI, channel, 0)
		SetConfig(_KD, channel, 0)
		SetConfig(_ICAP, channel, 0)
	End If
	Return

PrintFeedback:
	Print("&f")
	Print(":", channel)
	Print(":", GetValue(_MOTAMPS, channel))
	Print(":", GetValue(_MOTCMD, channel))
	Print(":", GetValue(_MOTPWR, channel))
	Print(":", GetValue(_ABSPEED, channel))
	Print(":", GetValue(_ABCNTR, channel))
	Print(":", GetValue(_VOLTS, 2))
	Print(":", GetValue(_BATAMPS, channel))
	Print(":", GetValue(_TEMP, channel+1))
	Print("\r")
	Return

PrintStatus:
	Print("&s")
	Print(":", SCRIPT_VER)
	Print(":", GetValue(_FLTFLAG))
	Print(":", GetValue(_STFLAG))
	Print(":", GetValue(_VOLTS, 1))
	Print(":", GetValue(_VOLTS, 3))
	Print(":", GetValue(_TEMP, 1))
	Print("\r")
	Return

