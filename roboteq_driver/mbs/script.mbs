' Require all variables to be declared
Option Explicit

' Variable declarations
Dim SCRIPT_VER as Integer
Dim NUM_CHANNELS as Integer
Dim FEEDBACK_PERIOD_MS as Integer
Dim STATUS_PERIOD_MS as Integer
Dim channel as Integer
Dim prev_mode[2] As Integer
Dim mode as Integer
Dim status_counter as Integer

' Constants
SCRIPT_VER=1
NUM_CHANNELS=2
FEEDBACK_PERIOD_MS=20
STATUS_PERIOD_MS=100
SetConfig(_ECHOF, 1)	' disable echo
SetConfig(_SCRO, 1)		' select serial port for Print statements

' Mode values are:
'   -1: stopped
'    0: closed loop speed mode
'    1: closed loop count position mode
' which correspond to the constants in roboteq_msgs/Command.
' The user variable VAR[x] is used to set the current mode for channel x.
' Here, we set prev_mode and VAR to cause a transition into stop mode at
' startup.
For channel = 1 AndWhile channel <= NUM_CHANNELS Evaluate channel++
	prev_mode[channel - 1] = -127
	SetCommand(_VAR, channel, -1)
Next

' Main loop
status_counter = STATUS_PERIOD_MS / FEEDBACK_PERIOD_MS
While True
	SetTimerCount(0, FEEDBACK_PERIOD_MS)
	SetTimerState(0, 0)		' start

	For channel = 1 AndWhile channel <= NUM_CHANNELS Evaluate channel++
		mode = GetValue(_VAR, channel)
		If mode <> prev_mode[channel - 1] Then
			If mode = 0 Then
				' closed loop speed mode
				SetConfig(_MMOD, channel, 1)
				SetConfig(_KP, channel, 0)
				SetConfig(_KI, channel, 10)
				SetConfig(_KD, channel, 0)
				SetConfig(_ICAP, channel, 100)
			ElseIf mode = 1 Then
				' closed loop count position mode
				SetConfig(_MMOD, channel, 3)
				SetConfig(_KP, channel, 20)
				SetConfig(_KI, channel, 0)
				SetConfig(_KD, channel, 0)
				SetConfig(_ICAP, channel, 0)
			Else
				' stop
				SetConfig(_MMOD, channel, 1)
				SetConfig(_KP, channel, 0)
				SetConfig(_KI, channel, 0)
				SetConfig(_KD, channel, 0)
				SetConfig(_ICAP, channel, 0)
				SetCommand(_G, channel, 0)
			End If

			prev_mode[channel - 1] = mode
		End If

		' Print feedback for this channel
		GoSub PrintFeedback
	Next

	' Print controller status
	status_counter--
	If status_counter = 0 Then
		GoSub PrintStatus
		status_counter = STATUS_PERIOD_MS / FEEDBACK_PERIOD_MS
	End If

	Wait(GetTimerCount(0))
End While

PrintFeedback:
	Print("&f")
	Print(":", channel)
	Print(":", GetValue(_MOTAMPS, channel))
	Print(":", GetValue(_MOTCMD, channel))
	Print(":", GetValue(_MOTPWR, channel))
	Print(":", GetValue(_ABSPEED, channel))
	Print(":", GetValue(_ABCNTR, channel))
	Print(":", GetValue(_VOLTS, 2))
	Print(":", GetValue(_BATAMPS, channel))
	Print(":", GetValue(_TEMP, channel+1))
	Print("\r")
	Return

PrintStatus:
	Print("&s")
	Print(":", SCRIPT_VER)
	Print(":", GetValue(_FLTFLAG))
	Print(":", GetValue(_STFLAG))
	Print(":", GetValue(_VOLTS, 1))
	Print(":", GetValue(_VOLTS, 3))
	Print(":", GetValue(_TEMP, 1))
	Print("\r")
	Return
